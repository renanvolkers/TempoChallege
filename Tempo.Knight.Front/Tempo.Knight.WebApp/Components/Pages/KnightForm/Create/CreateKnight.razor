@page "/create-knight"
@inject HttpClient Http

<link href="CreateKnight.css" rel="stylesheet">

<div class="knight-form verticalScroll">
    <EditForm Model="knight" OnValidSubmit="SubmitForm">
        <h1>Adicionar Cavaleiro</h1>

        <div class="form-group">
            <label for="name">Nome:</label>
            <InputText id="name" @bind-Value="knight.Name" class="form-control" required />
        </div>
        <div class="form-group">
            <label for="nickname">Apelido:</label>
            <InputText id="nickname" @bind-Value="knight.Nickname" class="form-control" required />
        </div>
        <div class="form-group">
            <label for="birthday">Data de Nascimento:</label>
            <InputDate id="birthday" @bind-Value="knight.Birthday" class="form-control" required />
        </div>
        <div class="form-group">
            <div class="dropList">
                <label for="keyAttribute">Atributo Principal:</label>
                <InputSelect id="keyAttribute" @bind-Value="knight.KeyAttribute" class="form-control" required>
                    @foreach (var attribute in availableAttributes)
                    {
                        <option value=@(attribute)>@(attribute)</option>
                    }
                </InputSelect>
            </div>
            <div>
                <InputNumber class="input-left form-control" @bind-Value="attrKeyValue" placeholder="g" required />
            </div>
        </div>
        <div class="form-group ">
            <label for="attributes">Atributos:</label>
            <div class="attributes-grid">
                <div class="cards-container horizontalScroll">
                    @foreach (var tribute in tributes)
                    {
                        <div @onclick="() => ToggleCardSelection(tribute)" class="tribute-card @((tribute.Selected ? "card-selected" : ""))">
                            <img src="@tribute.Image" alt="@tribute.Name" class="@((tribute.Selected ? "selected" : ""))">
                            <div class="card-content">
                                <h4>@tribute.Name</h4>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="form-group">
            <label>Arma:</label>
            <div>
                <InputText @bind-Value="weaponSingle.Name" placeholder="Nome da Arma" class="form-control" required />
            </div>
            <div>
                <InputNumber @bind-Value="weaponSingle.Mod" placeholder="Modificador" class="input-left form-control" required />
            </div>
            <div class="containerBotton">
                <button type="button" class="bottom-right btn btn-primary" @onclick="AddWeapon">Adicionar Arma</button>
            </div>
        </div>
        <div class="cards-container">
            <div class="form-group">
                <label for="attributes">Armas:</label>
                <div class="attributes-grid">
                    <div class="cards-container">
                        @foreach (var weapon in knight.Weapons)
                        {
                            <div class="tribute-card">
                                <div class="card-content">
                                    <label>Mod: @weapon.Mod</label>
                                    <label>Name: @weapon.Name</label>
                                    <label>Attrib: @weapon.Attr</label>
                                    <button type="button" @onclick="() => RemoveWeapon(weapon)" class="btn btn-danger">Remover</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="containerBotton">
            <div class="bottom-right"></div>
            <button type="submit" class="bottom-left btn btn-primary">Pronto</button>
        </div>
    </EditForm>
</div>

@code {
    private Knight knight = new();
    private List<string> availableAttributes = new List<string>
    {
        "Strength",
        "Dexterity",
        "Constitution",
        "Intelligence",
        "Wisdom",
        "Charisma"
    };
    private int attrKeyValue;
    private List<Tribute> tributes = new List<Tribute>
    {
        new Tribute { Name = "Dexterity", Image = "assets/Destreza.jpg" },
        new Tribute { Name = "Wisdom", Image = "assets/Wisdom.png" },
        new Tribute { Name = "Constitution", Image = "assets/Constitution.png" },
        new Tribute { Name = "Strength", Image = "assets/forca.jpg" },
        new Tribute { Name = "Intelligence", Image = "assets/Intelligence.png" },
        new Tribute { Name = "Charisma", Image = "assets/logo.png" }
,
    };
    private Weapon weaponSingle = new Weapon();

    private async Task SubmitForm()
    {
        knight.Attributes = new Dictionary<string, int> { { knight.KeyAttribute, attrKeyValue } };

        try
        {
            var response = await Http.PostAsJsonAsync("/api/knights", knight);
            response.EnsureSuccessStatusCode();

            // Handle successful response
            ResetForm();
        }
        catch (HttpRequestException ex)
        {
            // Handle error
            Console.Error.WriteLine($"Request error: {ex.Message}");
        }
    }

    private void ToggleCardSelection(Tribute tribute)
    {
        this.tributes.ForEach(tribute_ =>
        {
            if (tribute.Name == tribute_.Name)
            {
                tribute_.Selected = !tribute.Selected;
                weaponSingle.Attr = tribute.Name;
            }
            else
            {
                tribute_.Selected = false;
            }
        });

    }

    private void AddWeapon()
    {
        knight.Weapons.Add(new Weapon
            {
                Name = weaponSingle.Name,
                Mod = weaponSingle.Mod,
                Attr = weaponSingle.Attr,
                Equipped = true
            });
        weaponSingle = new Weapon(); // Reset the weapon form
    }

    private void RemoveWeapon(Weapon weapon)
    {
        knight.Weapons.Remove(weapon);
    }

    private void ResetForm()
    {
        knight = new Knight();
        weaponSingle = new Weapon();
        attrKeyValue = 0;
        foreach (var tribute in tributes)
        {
            tribute.Selected = false;
        }
    }

    public class Knight
    {
        public string Name { get; set; } = string.Empty;
        public string Nickname { get; set; } = string.Empty;
        public DateTime Birthday { get; set; }
        public string KeyAttribute { get; set; } = string.Empty;
        public List<Weapon> Weapons { get; set; } = new();
        public Dictionary<string, int> Attributes { get; set; } = new();
    }

    public class Weapon
    {
        public string Name { get; set; } = string.Empty;
        public int Mod { get; set; }
        public string Attr { get; set; } = string.Empty;
        public bool Equipped { get; set; }
    }

    public class Tribute
    {
        public string Name { get; set; } = string.Empty;
        public string Image { get; set; } = string.Empty;
        public bool Selected { get; set; }
    }
}
